
D:
    --check out D experimental allocators



library enhancements:
    --generic matrix library which should work with any slice(static + dynamic sizes)
    --jemalloc

    --link with voxelizedBindings dynamically
    --Link Time Optimization (LTO)

    --create compilation instructions:

    sudo apt-get install liblapacke-dev
    sudo apt-get install libglfw3-dev


voxel engine:
    --ucms and acms are out of the game (they are too complex and slow)
    --test umdc, choose between umdc, uniform cubical marching squares and uniform/adaptive blocky terrain
    --write(or find) .obj(or any other format that operates on triangles) to dense hermite grid converter, see Polymender
    UPDATE ^^ see DCF and one other format (see other impl of dc)

    --clean up GPU stuff


    --implement custom GPU noise using some really fast random noise backend ? Or even port FastNoise to GPU !
    --implement picking and on-the-fly terrain modification(without full reload)

    --adaptive sampling

    --proc functions with no self-intersecting triangles (see other dc impl)

    why ATA|ATB|BTB variant does not work with double's ?
    write better matrix multiplication
    see https://github.com/Lin20/isosurface/blob/master/Isosurface/Isosurface/QEFSolver/QEFSolver.cs for working ATA|ATB|BTB representation + SVD :)
    add ability to mark voxel as unsimplifiable, say those voxels that are a part of user built structures(we dont wont them to be skewed at least while player is near them)
    TODO modifiable (fast) terrain

    --for real time manifold rendering with sharp feature preservation LOD techniques are required

    LOD: https://pdfs.semanticscholar.org/bdef/64a903d6534109b29eb922fd3359ef3c0709.pdf
    realtime raytracing of algebraic isosurfaces: https://pdfs.semanticscholar.org/7beb/42b99133f55621a432ce88b522be31325e97.pdf

    So options for realtime manifold feature preserving terrain rendering:
    1) adaptive manifold LOD-based isosurface extraction
    2) raytracing ? NOT AN OPTION (noise functions are too general : f(x,y,z) = 0 + smooth, that is too little to sample them efficiently but raytracing implicit noisy surface would require lots of samples per ray to the find minimum intersection point)

    also see https://www.cs.rice.edu/~jwarren/papers/techreport02408.pdf (more about DC, QEFs, space optimisations and polygon generation)
